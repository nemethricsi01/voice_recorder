
voice_recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002198  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080022a4  080022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002310  08002310  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002310  08002310  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002310  08002310  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002310  08002310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000001c  08002334  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002334  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b1cc  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001902  00000000  00000000  0002b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e7  00000000  00000000  0002d6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017340  00000000  00000000  0002df8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c577  00000000  00000000  000452cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000896e8  00000000  00000000  00051846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f78  00000000  00000000  000daf30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ddea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800228c 	.word	0x0800228c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800228c 	.word	0x0800228c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b598      	push	{r3, r4, r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fb42 	bl	80007e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f8f6 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f9b2 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f986 	bl	800047c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000170:	f000 f936 	bl	80003e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lastbutton = actbutton = HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 8000174:	2101      	movs	r1, #1
 8000176:	486b      	ldr	r0, [pc, #428]	; (8000324 <main+0x1c8>)
 8000178:	f000 fe4e 	bl	8000e18 <HAL_GPIO_ReadPin>
 800017c:	4603      	mov	r3, r0
 800017e:	461a      	mov	r2, r3
 8000180:	4b69      	ldr	r3, [pc, #420]	; (8000328 <main+0x1cc>)
 8000182:	701a      	strb	r2, [r3, #0]
 8000184:	4b68      	ldr	r3, [pc, #416]	; (8000328 <main+0x1cc>)
 8000186:	781a      	ldrb	r2, [r3, #0]
 8000188:	4b68      	ldr	r3, [pc, #416]	; (800032c <main+0x1d0>)
 800018a:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 800018c:	4868      	ldr	r0, [pc, #416]	; (8000330 <main+0x1d4>)
 800018e:	f001 fad3 	bl	8001738 <HAL_TIM_Base_Start_IT>
  //led = low = green, high = red

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);//green
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000198:	4866      	ldr	r0, [pc, #408]	; (8000334 <main+0x1d8>)
 800019a:	f000 fe54 	bl	8000e46 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800019e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001a2:	f000 fb83 	bl	80008ac <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);//red
 80001a6:	2201      	movs	r2, #1
 80001a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ac:	4861      	ldr	r0, [pc, #388]	; (8000334 <main+0x1d8>)
 80001ae:	f000 fe4a 	bl	8000e46 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80001b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b6:	f000 fb79 	bl	80008ac <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);//green
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c0:	485c      	ldr	r0, [pc, #368]	; (8000334 <main+0x1d8>)
 80001c2:	f000 fe40 	bl	8000e46 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80001c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ca:	f000 fb6f 	bl	80008ac <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);//red
 80001ce:	2201      	movs	r2, #1
 80001d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d4:	4857      	ldr	r0, [pc, #348]	; (8000334 <main+0x1d8>)
 80001d6:	f000 fe36 	bl	8000e46 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80001da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001de:	f000 fb65 	bl	80008ac <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);//green
 80001e2:	2200      	movs	r2, #0
 80001e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e8:	4852      	ldr	r0, [pc, #328]	; (8000334 <main+0x1d8>)
 80001ea:	f000 fe2c 	bl	8000e46 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart2, promptoff, strlen(promptoff), 100);
 80001ee:	4b52      	ldr	r3, [pc, #328]	; (8000338 <main+0x1dc>)
 80001f0:	681c      	ldr	r4, [r3, #0]
 80001f2:	4b51      	ldr	r3, [pc, #324]	; (8000338 <main+0x1dc>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f7ff ffa8 	bl	800014c <strlen>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b29a      	uxth	r2, r3
 8000200:	2364      	movs	r3, #100	; 0x64
 8000202:	4621      	mov	r1, r4
 8000204:	484d      	ldr	r0, [pc, #308]	; (800033c <main+0x1e0>)
 8000206:	f001 fe95 	bl	8001f34 <HAL_UART_Transmit>
  HAL_Delay(500);
 800020a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020e:	f000 fb4d 	bl	80008ac <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);//red
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000218:	4846      	ldr	r0, [pc, #280]	; (8000334 <main+0x1d8>)
 800021a:	f000 fe14 	bl	8000e46 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart2, function, strlen(function), 100);
 800021e:	4b48      	ldr	r3, [pc, #288]	; (8000340 <main+0x1e4>)
 8000220:	681c      	ldr	r4, [r3, #0]
 8000222:	4b47      	ldr	r3, [pc, #284]	; (8000340 <main+0x1e4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ff90 	bl	800014c <strlen>
 800022c:	4603      	mov	r3, r0
 800022e:	b29a      	uxth	r2, r3
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	4621      	mov	r1, r4
 8000234:	4841      	ldr	r0, [pc, #260]	; (800033c <main+0x1e0>)
 8000236:	f001 fe7d 	bl	8001f34 <HAL_UART_Transmit>
  HAL_Delay(500);
 800023a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800023e:	f000 fb35 	bl	80008ac <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);//green
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000248:	483a      	ldr	r0, [pc, #232]	; (8000334 <main+0x1d8>)
 800024a:	f000 fdfc 	bl	8000e46 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart2, playmode, strlen(playmode), 100);
 800024e:	4b3d      	ldr	r3, [pc, #244]	; (8000344 <main+0x1e8>)
 8000250:	681c      	ldr	r4, [r3, #0]
 8000252:	4b3c      	ldr	r3, [pc, #240]	; (8000344 <main+0x1e8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f7ff ff78 	bl	800014c <strlen>
 800025c:	4603      	mov	r3, r0
 800025e:	b29a      	uxth	r2, r3
 8000260:	2364      	movs	r3, #100	; 0x64
 8000262:	4621      	mov	r1, r4
 8000264:	4835      	ldr	r0, [pc, #212]	; (800033c <main+0x1e0>)
 8000266:	f001 fe65 	bl	8001f34 <HAL_UART_Transmit>
  HAL_Delay(500);
 800026a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800026e:	f000 fb1d 	bl	80008ac <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);//red
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000278:	482e      	ldr	r0, [pc, #184]	; (8000334 <main+0x1d8>)
 800027a:	f000 fde4 	bl	8000e46 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800027e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000282:	f000 fb13 	bl	80008ac <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);//green
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800028c:	4829      	ldr	r0, [pc, #164]	; (8000334 <main+0x1d8>)
 800028e:	f000 fdda 	bl	8000e46 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  actbutton = HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 8000292:	2101      	movs	r1, #1
 8000294:	4823      	ldr	r0, [pc, #140]	; (8000324 <main+0x1c8>)
 8000296:	f000 fdbf 	bl	8000e18 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	461a      	mov	r2, r3
 800029e:	4b22      	ldr	r3, [pc, #136]	; (8000328 <main+0x1cc>)
 80002a0:	701a      	strb	r2, [r3, #0]
	  if(actbutton != lastbutton)
 80002a2:	4b21      	ldr	r3, [pc, #132]	; (8000328 <main+0x1cc>)
 80002a4:	781a      	ldrb	r2, [r3, #0]
 80002a6:	4b21      	ldr	r3, [pc, #132]	; (800032c <main+0x1d0>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d0f1      	beq.n	8000292 <main+0x136>
	  {
		  debouncetimer = DEBOUNCETIME;
 80002ae:	4b26      	ldr	r3, [pc, #152]	; (8000348 <main+0x1ec>)
 80002b0:	2232      	movs	r2, #50	; 0x32
 80002b2:	701a      	strb	r2, [r3, #0]
		  while(debouncetimer >0)
 80002b4:	e014      	b.n	80002e0 <main+0x184>
		  {
			  actbutton = HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 80002b6:	2101      	movs	r1, #1
 80002b8:	481a      	ldr	r0, [pc, #104]	; (8000324 <main+0x1c8>)
 80002ba:	f000 fdad 	bl	8000e18 <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b19      	ldr	r3, [pc, #100]	; (8000328 <main+0x1cc>)
 80002c4:	701a      	strb	r2, [r3, #0]
			  if(actbutton != lastbutton)
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <main+0x1cc>)
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <main+0x1d0>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d006      	beq.n	80002e0 <main+0x184>
			  {
				  debouncetimer = DEBOUNCETIME;
 80002d2:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <main+0x1ec>)
 80002d4:	2232      	movs	r2, #50	; 0x32
 80002d6:	701a      	strb	r2, [r3, #0]
				  lastbutton = actbutton;
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <main+0x1cc>)
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <main+0x1d0>)
 80002de:	701a      	strb	r2, [r3, #0]
		  while(debouncetimer >0)
 80002e0:	4b19      	ldr	r3, [pc, #100]	; (8000348 <main+0x1ec>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d1e6      	bne.n	80002b6 <main+0x15a>
			  }
		  }
		  if(lastbutton == 0)
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <main+0x1d0>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1d0      	bne.n	8000292 <main+0x136>
		  {
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);//red
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	480f      	ldr	r0, [pc, #60]	; (8000334 <main+0x1d8>)
 80002f8:	f000 fda5 	bl	8000e46 <HAL_GPIO_WritePin>
			  ledtimer = 2000;
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <main+0x1f0>)
 80002fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000302:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, play, strlen(play), 100);
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <main+0x1f4>)
 8000306:	681c      	ldr	r4, [r3, #0]
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <main+0x1f4>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff1d 	bl	800014c <strlen>
 8000312:	4603      	mov	r3, r0
 8000314:	b29a      	uxth	r2, r3
 8000316:	2364      	movs	r3, #100	; 0x64
 8000318:	4621      	mov	r1, r4
 800031a:	4808      	ldr	r0, [pc, #32]	; (800033c <main+0x1e0>)
 800031c:	f001 fe0a 	bl	8001f34 <HAL_UART_Transmit>
	  actbutton = HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 8000320:	e7b7      	b.n	8000292 <main+0x136>
 8000322:	bf00      	nop
 8000324:	40010c00 	.word	0x40010c00
 8000328:	200000c9 	.word	0x200000c9
 800032c:	200000c8 	.word	0x200000c8
 8000330:	20000038 	.word	0x20000038
 8000334:	40010800 	.word	0x40010800
 8000338:	20000008 	.word	0x20000008
 800033c:	20000080 	.word	0x20000080
 8000340:	20000004 	.word	0x20000004
 8000344:	20000000 	.word	0x20000000
 8000348:	200000ca 	.word	0x200000ca
 800034c:	200000cc 	.word	0x200000cc
 8000350:	2000000c 	.word	0x2000000c

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b090      	sub	sp, #64	; 0x40
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	2228      	movs	r2, #40	; 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f001 ff66 	bl	8002234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2301      	movs	r3, #1
 8000386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000388:	2302      	movs	r3, #2
 800038a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000390:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000392:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000396:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0318 	add.w	r3, r7, #24
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fd6b 	bl	8000e78 <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a8:	f000 f918 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	230f      	movs	r3, #15
 80003ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b0:	2302      	movs	r3, #2
 80003b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2102      	movs	r1, #2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 ffd8 	bl	800137c <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003d2:	f000 f903 	bl	80005dc <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3740      	adds	r7, #64	; 0x40
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f4:	463b      	mov	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_TIM4_Init+0x94>)
 80003fe:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <MX_TIM4_Init+0x98>)
 8000400:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72;
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_TIM4_Init+0x94>)
 8000404:	2248      	movs	r2, #72	; 0x48
 8000406:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_TIM4_Init+0x94>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800040e:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_TIM4_Init+0x94>)
 8000410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000414:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_TIM4_Init+0x94>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_TIM4_Init+0x94>)
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000422:	4814      	ldr	r0, [pc, #80]	; (8000474 <MX_TIM4_Init+0x94>)
 8000424:	f001 f938 	bl	8001698 <HAL_TIM_Base_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800042e:	f000 f8d5 	bl	80005dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000436:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	4619      	mov	r1, r3
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <MX_TIM4_Init+0x94>)
 8000440:	f001 fad4 	bl	80019ec <HAL_TIM_ConfigClockSource>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800044a:	f000 f8c7 	bl	80005dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044e:	2300      	movs	r3, #0
 8000450:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000456:	463b      	mov	r3, r7
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <MX_TIM4_Init+0x94>)
 800045c:	f001 fcaa 	bl	8001db4 <HAL_TIMEx_MasterConfigSynchronization>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000466:	f000 f8b9 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000038 	.word	0x20000038
 8000478:	40000800 	.word	0x40000800

0800047c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <MX_USART2_UART_Init+0x50>)
 8000484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800048c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004b4:	f001 fcee 	bl	8001e94 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004be:	f000 f88d 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000080 	.word	0x20000080
 80004cc:	40004400 	.word	0x40004400

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <MX_GPIO_Init+0xa8>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a23      	ldr	r2, [pc, #140]	; (8000578 <MX_GPIO_Init+0xa8>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_GPIO_Init+0xa8>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MX_GPIO_Init+0xa8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <MX_GPIO_Init+0xa8>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_GPIO_Init+0xa8>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_GPIO_Init+0xa8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a17      	ldr	r2, [pc, #92]	; (8000578 <MX_GPIO_Init+0xa8>)
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_GPIO_Init+0xa8>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0308 	and.w	r3, r3, #8
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000532:	4812      	ldr	r0, [pc, #72]	; (800057c <MX_GPIO_Init+0xac>)
 8000534:	f000 fc87 	bl	8000e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000538:	2301      	movs	r3, #1
 800053a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000540:	2301      	movs	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <MX_GPIO_Init+0xb0>)
 800054c:	f000 fae0 	bl	8000b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2302      	movs	r3, #2
 8000560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	4619      	mov	r1, r3
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_GPIO_Init+0xac>)
 800056a:	f000 fad1 	bl	8000b10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800056e:	bf00      	nop
 8000570:	3720      	adds	r7, #32
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	40010800 	.word	0x40010800
 8000580:	40010c00 	.word	0x40010c00

08000584 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if(debouncetimer>0)
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d005      	beq.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		debouncetimer--;
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3b01      	subs	r3, #1
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800059e:	701a      	strb	r2, [r3, #0]
	}
	if(ledtimer > 0)
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00f      	beq.n	80005c8 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		ledtimer--;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005b2:	801a      	strh	r2, [r3, #0]
		if(ledtimer == 0)
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d105      	bne.n	80005c8 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);//green
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005c4:	f000 fc3f 	bl	8000e46 <HAL_GPIO_WritePin>
		}
	}

}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000ca 	.word	0x200000ca
 80005d4:	200000cc 	.word	0x200000cc
 80005d8:	40010800 	.word	0x40010800

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler+0x8>
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a14      	ldr	r2, [pc, #80]	; (8000644 <HAL_MspInit+0x5c>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_MspInit+0x5c>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_MspInit+0x60>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_MspInit+0x60>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000
 8000648:	40010000 	.word	0x40010000

0800064c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <HAL_TIM_Base_MspInit+0x44>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d113      	bne.n	8000686 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_TIM_Base_MspInit+0x48>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <HAL_TIM_Base_MspInit+0x48>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_TIM_Base_MspInit+0x48>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	201e      	movs	r0, #30
 800067c:	f000 fa11 	bl	8000aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000680:	201e      	movs	r0, #30
 8000682:	f000 fa2a 	bl	8000ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40000800 	.word	0x40000800
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <HAL_UART_MspInit+0x88>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d12f      	bne.n	8000718 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <HAL_UART_MspInit+0x8c>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a19      	ldr	r2, [pc, #100]	; (8000724 <HAL_UART_MspInit+0x8c>)
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_UART_MspInit+0x8c>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_UART_MspInit+0x8c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a13      	ldr	r2, [pc, #76]	; (8000724 <HAL_UART_MspInit+0x8c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_UART_MspInit+0x8c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e8:	2304      	movs	r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006fc:	f000 fa08 	bl	8000b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000700:	2308      	movs	r3, #8
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_UART_MspInit+0x90>)
 8000714:	f000 f9fc 	bl	8000b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40004400 	.word	0x40004400
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f87f 	bl	8000874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <TIM4_IRQHandler+0x10>)
 8000782:	f001 f82b 	bl	80017dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000038 	.word	0x20000038

08000790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800079c:	f7ff fff8 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007a2:	490c      	ldr	r1, [pc, #48]	; (80007d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b8:	4c09      	ldr	r4, [pc, #36]	; (80007e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f001 fd3d 	bl	8002244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fcc7 	bl	800015c <main>
  bx lr
 80007ce:	4770      	bx	lr
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80007d8:	08002318 	.word	0x08002318
  ldr r2, =_sbss
 80007dc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80007e0:	200000d4 	.word	0x200000d4

080007e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC1_2_IRQHandler>
	...

080007e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_Init+0x28>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <HAL_Init+0x28>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 f947 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 f808 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000804:	f7ff fef0 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40022000 	.word	0x40022000

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x54>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x58>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	fbb3 f3f1 	udiv	r3, r3, r1
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f95f 	bl	8000af6 <HAL_SYSTICK_Config>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e00e      	b.n	8000860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d80a      	bhi.n	800085e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f000 f927 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <HAL_InitTick+0x5c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000010 	.word	0x20000010
 800086c:	20000018 	.word	0x20000018
 8000870:	20000014 	.word	0x20000014

08000874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x1c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <HAL_IncTick+0x20>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	20000018 	.word	0x20000018
 8000894:	200000d0 	.word	0x200000d0

08000898 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <HAL_GetTick+0x10>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	200000d0 	.word	0x200000d0

080008ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b4:	f7ff fff0 	bl	8000898 <HAL_GetTick>
 80008b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c4:	d005      	beq.n	80008d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_Delay+0x44>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d2:	bf00      	nop
 80008d4:	f7ff ffe0 	bl	8000898 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f7      	bhi.n	80008d4 <HAL_Delay+0x28>
  {
  }
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000018 	.word	0x20000018

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <__NVIC_EnableIRQ+0x34>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f7ff ff90 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff2d 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff42 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff90 	bl	80009e4 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5f 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff35 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffa2 	bl	8000a48 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b08b      	sub	sp, #44	; 0x2c
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b22:	e169      	b.n	8000df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b24:	2201      	movs	r2, #1
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 8158 	bne.w	8000df2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4a9a      	ldr	r2, [pc, #616]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d05e      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b4c:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d875      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b52:	4a98      	ldr	r2, [pc, #608]	; (8000db4 <HAL_GPIO_Init+0x2a4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d058      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b58:	4a96      	ldr	r2, [pc, #600]	; (8000db4 <HAL_GPIO_Init+0x2a4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d86f      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b5e:	4a96      	ldr	r2, [pc, #600]	; (8000db8 <HAL_GPIO_Init+0x2a8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d052      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b64:	4a94      	ldr	r2, [pc, #592]	; (8000db8 <HAL_GPIO_Init+0x2a8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d869      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b6a:	4a94      	ldr	r2, [pc, #592]	; (8000dbc <HAL_GPIO_Init+0x2ac>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d04c      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b70:	4a92      	ldr	r2, [pc, #584]	; (8000dbc <HAL_GPIO_Init+0x2ac>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d863      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b76:	4a92      	ldr	r2, [pc, #584]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d046      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b7c:	4a90      	ldr	r2, [pc, #576]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d85d      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d82a      	bhi.n	8000bdc <HAL_GPIO_Init+0xcc>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d859      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <HAL_GPIO_Init+0x80>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000c0b 	.word	0x08000c0b
 8000b94:	08000be5 	.word	0x08000be5
 8000b98:	08000bf7 	.word	0x08000bf7
 8000b9c:	08000c39 	.word	0x08000c39
 8000ba0:	08000c3f 	.word	0x08000c3f
 8000ba4:	08000c3f 	.word	0x08000c3f
 8000ba8:	08000c3f 	.word	0x08000c3f
 8000bac:	08000c3f 	.word	0x08000c3f
 8000bb0:	08000c3f 	.word	0x08000c3f
 8000bb4:	08000c3f 	.word	0x08000c3f
 8000bb8:	08000c3f 	.word	0x08000c3f
 8000bbc:	08000c3f 	.word	0x08000c3f
 8000bc0:	08000c3f 	.word	0x08000c3f
 8000bc4:	08000c3f 	.word	0x08000c3f
 8000bc8:	08000c3f 	.word	0x08000c3f
 8000bcc:	08000c3f 	.word	0x08000c3f
 8000bd0:	08000c3f 	.word	0x08000c3f
 8000bd4:	08000bed 	.word	0x08000bed
 8000bd8:	08000c01 	.word	0x08000c01
 8000bdc:	4a79      	ldr	r2, [pc, #484]	; (8000dc4 <HAL_GPIO_Init+0x2b4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d013      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be2:	e02c      	b.n	8000c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e029      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	623b      	str	r3, [r7, #32]
          break;
 8000bf4:	e024      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e01f      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	330c      	adds	r3, #12
 8000c06:	623b      	str	r3, [r7, #32]
          break;
 8000c08:	e01a      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c12:	2304      	movs	r3, #4
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e013      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d105      	bne.n	8000c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c20:	2308      	movs	r3, #8
 8000c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	611a      	str	r2, [r3, #16]
          break;
 8000c2a:	e009      	b.n	8000c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	615a      	str	r2, [r3, #20]
          break;
 8000c36:	e003      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
          break;
 8000c3c:	e000      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          break;
 8000c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	2bff      	cmp	r3, #255	; 0xff
 8000c44:	d801      	bhi.n	8000c4a <HAL_GPIO_Init+0x13a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	e001      	b.n	8000c4e <HAL_GPIO_Init+0x13e>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	2bff      	cmp	r3, #255	; 0xff
 8000c54:	d802      	bhi.n	8000c5c <HAL_GPIO_Init+0x14c>
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x152>
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	3b08      	subs	r3, #8
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	210f      	movs	r1, #15
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	6a39      	ldr	r1, [r7, #32]
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a4c      	ldr	r2, [pc, #304]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca8:	4a48      	ldr	r2, [pc, #288]	; (8000dcc <HAL_GPIO_Init+0x2bc>)
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a40      	ldr	r2, [pc, #256]	; (8000dd0 <HAL_GPIO_Init+0x2c0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d013      	beq.n	8000cfc <HAL_GPIO_Init+0x1ec>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <HAL_GPIO_Init+0x2c4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d00d      	beq.n	8000cf8 <HAL_GPIO_Init+0x1e8>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3e      	ldr	r2, [pc, #248]	; (8000dd8 <HAL_GPIO_Init+0x2c8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d007      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e4>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3d      	ldr	r2, [pc, #244]	; (8000ddc <HAL_GPIO_Init+0x2cc>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d101      	bne.n	8000cf0 <HAL_GPIO_Init+0x1e0>
 8000cec:	2303      	movs	r3, #3
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	e004      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d00:	f002 0203 	and.w	r2, r2, #3
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	4093      	lsls	r3, r2
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d0e:	492f      	ldr	r1, [pc, #188]	; (8000dcc <HAL_GPIO_Init+0x2bc>)
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	492c      	ldr	r1, [pc, #176]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	608b      	str	r3, [r1, #8]
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	4928      	ldr	r1, [pc, #160]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	4922      	ldr	r1, [pc, #136]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	60cb      	str	r3, [r1, #12]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	491e      	ldr	r1, [pc, #120]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	4918      	ldr	r1, [pc, #96]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	604b      	str	r3, [r1, #4]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4914      	ldr	r1, [pc, #80]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d021      	beq.n	8000de4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	490e      	ldr	r1, [pc, #56]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]
 8000dac:	e021      	b.n	8000df2 <HAL_GPIO_Init+0x2e2>
 8000dae:	bf00      	nop
 8000db0:	10320000 	.word	0x10320000
 8000db4:	10310000 	.word	0x10310000
 8000db8:	10220000 	.word	0x10220000
 8000dbc:	10210000 	.word	0x10210000
 8000dc0:	10120000 	.word	0x10120000
 8000dc4:	10110000 	.word	0x10110000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40011400 	.word	0x40011400
 8000de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4909      	ldr	r1, [pc, #36]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	3301      	adds	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f47f ae8e 	bne.w	8000b24 <HAL_GPIO_Init+0x14>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	372c      	adds	r7, #44	; 0x2c
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40010400 	.word	0x40010400

08000e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e001      	b.n	8000e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	807b      	strh	r3, [r7, #2]
 8000e52:	4613      	mov	r3, r2
 8000e54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e56:	787b      	ldrb	r3, [r7, #1]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5c:	887a      	ldrh	r2, [r7, #2]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e62:	e003      	b.n	8000e6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	041a      	lsls	r2, r3, #16
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	611a      	str	r2, [r3, #16]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
	...

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e272      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8087 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e98:	4b92      	ldr	r3, [pc, #584]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 030c 	and.w	r3, r3, #12
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	d00c      	beq.n	8000ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea4:	4b8f      	ldr	r3, [pc, #572]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	d112      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
 8000eb0:	4b8c      	ldr	r3, [pc, #560]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebe:	4b89      	ldr	r3, [pc, #548]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d06c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d168      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e24c      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x76>
 8000ee0:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a7f      	ldr	r2, [pc, #508]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e02e      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x98>
 8000ef6:	4b7b      	ldr	r3, [pc, #492]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7a      	ldr	r2, [pc, #488]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b78      	ldr	r3, [pc, #480]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a77      	ldr	r2, [pc, #476]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e01d      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0xbc>
 8000f1a:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a71      	ldr	r2, [pc, #452]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a6e      	ldr	r2, [pc, #440]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f34:	4b6b      	ldr	r3, [pc, #428]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a6a      	ldr	r2, [pc, #424]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a67      	ldr	r2, [pc, #412]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fca0 	bl	8000898 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fc9c 	bl	8000898 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e200      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0xe4>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fc8c 	bl	8000898 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fc88 	bl	8000898 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e1ec      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x10c>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d063      	beq.n	800107a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d11c      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d116      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d001      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e1c0      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4939      	ldr	r1, [pc, #228]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	e03a      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d020      	beq.n	800104e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fc41 	bl	8000898 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fc3d 	bl	8000898 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e1a1      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e015      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fc20 	bl	8000898 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105c:	f7ff fc1c 	bl	8000898 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e180      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d03a      	beq.n	80010fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d019      	beq.n	80010c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fc00 	bl	8000898 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff fbfc 	bl	8000898 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e160      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 face 	bl	800165c <RCC_Delay>
 80010c0:	e01c      	b.n	80010fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fbe6 	bl	8000898 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ce:	e00f      	b.n	80010f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d0:	f7ff fbe2 	bl	8000898 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d908      	bls.n	80010f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e146      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	42420000 	.word	0x42420000
 80010ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	4b92      	ldr	r3, [pc, #584]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e9      	bne.n	80010d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80a6 	beq.w	8001256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110e:	4b8b      	ldr	r3, [pc, #556]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10d      	bne.n	8001136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b88      	ldr	r3, [pc, #544]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a87      	ldr	r2, [pc, #540]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b85      	ldr	r3, [pc, #532]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001132:	2301      	movs	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	4b82      	ldr	r3, [pc, #520]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d118      	bne.n	8001174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001142:	4b7f      	ldr	r3, [pc, #508]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a7e      	ldr	r2, [pc, #504]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114e:	f7ff fba3 	bl	8000898 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001156:	f7ff fb9f 	bl	8000898 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b64      	cmp	r3, #100	; 0x64
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e103      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	4b75      	ldr	r3, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x312>
 800117c:	4b6f      	ldr	r3, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a6e      	ldr	r2, [pc, #440]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	e02d      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x334>
 8001192:	4b6a      	ldr	r3, [pc, #424]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a69      	ldr	r2, [pc, #420]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b67      	ldr	r3, [pc, #412]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a66      	ldr	r2, [pc, #408]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	e01c      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d10c      	bne.n	80011ce <HAL_RCC_OscConfig+0x356>
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a60      	ldr	r2, [pc, #384]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6213      	str	r3, [r2, #32]
 80011c0:	4b5e      	ldr	r3, [pc, #376]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a5d      	ldr	r2, [pc, #372]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6213      	str	r3, [r2, #32]
 80011cc:	e00b      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a5a      	ldr	r2, [pc, #360]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	4b58      	ldr	r3, [pc, #352]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4a57      	ldr	r2, [pc, #348]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d015      	beq.n	800121a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fb53 	bl	8000898 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fb4f 	bl	8000898 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0b1      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	4b4b      	ldr	r3, [pc, #300]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0ee      	beq.n	80011f6 <HAL_RCC_OscConfig+0x37e>
 8001218:	e014      	b.n	8001244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fb3d 	bl	8000898 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fb39 	bl	8000898 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e09b      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	4b40      	ldr	r3, [pc, #256]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ee      	bne.n	8001222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d105      	bne.n	8001256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a3b      	ldr	r2, [pc, #236]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8087 	beq.w	800136e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d061      	beq.n	8001330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d146      	bne.n	8001302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_RCC_OscConfig+0x4cc>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fb0d 	bl	8000898 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff fb09 	bl	8000898 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e06d      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d108      	bne.n	80012bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4921      	ldr	r1, [pc, #132]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a19      	ldr	r1, [r3, #32]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	430b      	orrs	r3, r1
 80012ce:	491b      	ldr	r1, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_RCC_OscConfig+0x4cc>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fadd 	bl	8000898 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff fad9 	bl	8000898 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e03d      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x46a>
 8001300:	e035      	b.n	800136e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_RCC_OscConfig+0x4cc>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fac6 	bl	8000898 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fac2 	bl	8000898 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e026      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x498>
 800132e:	e01e      	b.n	800136e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d107      	bne.n	8001348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e019      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
 800133c:	40021000 	.word	0x40021000
 8001340:	40007000 	.word	0x40007000
 8001344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_OscConfig+0x500>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	429a      	cmp	r2, r3
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0d0      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d910      	bls.n	80013c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 0207 	bic.w	r2, r3, #7
 80013a6:	4965      	ldr	r1, [pc, #404]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0b8      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d8:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a58      	ldr	r2, [pc, #352]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f0:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a52      	ldr	r2, [pc, #328]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fc:	4b50      	ldr	r3, [pc, #320]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	494d      	ldr	r1, [pc, #308]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d040      	beq.n	800149c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d115      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e07f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	4b41      	ldr	r3, [pc, #260]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e073      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e06b      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145a:	4b39      	ldr	r3, [pc, #228]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f023 0203 	bic.w	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4936      	ldr	r1, [pc, #216]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800146c:	f7ff fa14 	bl	8000898 <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001472:	e00a      	b.n	800148a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001474:	f7ff fa10 	bl	8000898 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e053      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 020c 	and.w	r2, r3, #12
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	429a      	cmp	r2, r3
 800149a:	d1eb      	bne.n	8001474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d210      	bcs.n	80014cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 0207 	bic.w	r2, r3, #7
 80014b2:	4922      	ldr	r1, [pc, #136]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e032      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4916      	ldr	r1, [pc, #88]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	490e      	ldr	r1, [pc, #56]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150a:	f000 f821 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 800150e:	4602      	mov	r2, r0
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	490a      	ldr	r1, [pc, #40]	; (8001544 <HAL_RCC_ClockConfig+0x1c8>)
 800151c:	5ccb      	ldrb	r3, [r1, r3]
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1cc>)
 8001524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1d0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f972 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40022000 	.word	0x40022000
 8001540:	40021000 	.word	0x40021000
 8001544:	080022e4 	.word	0x080022e4
 8001548:	20000010 	.word	0x20000010
 800154c:	20000014 	.word	0x20000014

08001550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b04      	cmp	r3, #4
 8001578:	d002      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x30>
 800157a:	2b08      	cmp	r3, #8
 800157c:	d003      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x36>
 800157e:	e027      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001582:	613b      	str	r3, [r7, #16]
      break;
 8001584:	e027      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	0c5b      	lsrs	r3, r3, #17
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015b2:	fb03 f202 	mul.w	r2, r3, r2
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e004      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	613b      	str	r3, [r7, #16]
      break;
 80015ce:	e002      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015d2:	613b      	str	r3, [r7, #16]
      break;
 80015d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d6:	693b      	ldr	r3, [r7, #16]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	007a1200 	.word	0x007a1200
 80015ec:	080022fc 	.word	0x080022fc
 80015f0:	0800230c 	.word	0x0800230c
 80015f4:	003d0900 	.word	0x003d0900

080015f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_RCC_GetHCLKFreq+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000010 	.word	0x20000010

0800160c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001610:	f7ff fff2 	bl	80015f8 <HAL_RCC_GetHCLKFreq>
 8001614:	4602      	mov	r2, r0
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	4903      	ldr	r1, [pc, #12]	; (8001630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	080022f4 	.word	0x080022f4

08001634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001638:	f7ff ffde 	bl	80015f8 <HAL_RCC_GetHCLKFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0adb      	lsrs	r3, r3, #11
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	080022f4 	.word	0x080022f4

0800165c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <RCC_Delay+0x34>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <RCC_Delay+0x38>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0a5b      	lsrs	r3, r3, #9
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001678:	bf00      	nop
  }
  while (Delay --);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	60fa      	str	r2, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f9      	bne.n	8001678 <RCC_Delay+0x1c>
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000010 	.word	0x20000010
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e041      	b.n	800172e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d106      	bne.n	80016c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7fe ffc4 	bl	800064c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3304      	adds	r3, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f000 fa74 	bl	8001bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d001      	beq.n	8001750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e03a      	b.n	80017c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_TIM_Base_Start_IT+0x98>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d00e      	beq.n	8001790 <HAL_TIM_Base_Start_IT+0x58>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177a:	d009      	beq.n	8001790 <HAL_TIM_Base_Start_IT+0x58>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d004      	beq.n	8001790 <HAL_TIM_Base_Start_IT+0x58>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d111      	bne.n	80017b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d010      	beq.n	80017c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b2:	e007      	b.n	80017c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	40012c00 	.word	0x40012c00
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40000800 	.word	0x40000800

080017dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d122      	bne.n	8001838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d11b      	bne.n	8001838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f06f 0202 	mvn.w	r2, #2
 8001808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f9b4 	bl	8001b8c <HAL_TIM_IC_CaptureCallback>
 8001824:	e005      	b.n	8001832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f9a7 	bl	8001b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f9b6 	bl	8001b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b04      	cmp	r3, #4
 8001844:	d122      	bne.n	800188c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b04      	cmp	r3, #4
 8001852:	d11b      	bne.n	800188c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0204 	mvn.w	r2, #4
 800185c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2202      	movs	r2, #2
 8001862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f98a 	bl	8001b8c <HAL_TIM_IC_CaptureCallback>
 8001878:	e005      	b.n	8001886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f97d 	bl	8001b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f98c 	bl	8001b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b08      	cmp	r3, #8
 8001898:	d122      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d11b      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0208 	mvn.w	r2, #8
 80018b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2204      	movs	r2, #4
 80018b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f960 	bl	8001b8c <HAL_TIM_IC_CaptureCallback>
 80018cc:	e005      	b.n	80018da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f953 	bl	8001b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f962 	bl	8001b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d122      	bne.n	8001934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d11b      	bne.n	8001934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0210 	mvn.w	r2, #16
 8001904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2208      	movs	r2, #8
 800190a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f936 	bl	8001b8c <HAL_TIM_IC_CaptureCallback>
 8001920:	e005      	b.n	800192e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f929 	bl	8001b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f938 	bl	8001b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d10e      	bne.n	8001960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0201 	mvn.w	r2, #1
 8001958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7fe fe12 	bl	8000584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	2b80      	cmp	r3, #128	; 0x80
 800196c:	d10e      	bne.n	800198c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001978:	2b80      	cmp	r3, #128	; 0x80
 800197a:	d107      	bne.n	800198c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fa7b 	bl	8001e82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001996:	2b40      	cmp	r3, #64	; 0x40
 8001998:	d10e      	bne.n	80019b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a4:	2b40      	cmp	r3, #64	; 0x40
 80019a6:	d107      	bne.n	80019b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f8fc 	bl	8001bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d10e      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d107      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f06f 0220 	mvn.w	r2, #32
 80019dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fa46 	bl	8001e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_TIM_ConfigClockSource+0x1c>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e0b4      	b.n	8001b72 <HAL_TIM_ConfigClockSource+0x186>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a40:	d03e      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8001a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a46:	f200 8087 	bhi.w	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
 8001a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a4e:	f000 8086 	beq.w	8001b5e <HAL_TIM_ConfigClockSource+0x172>
 8001a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a56:	d87f      	bhi.n	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
 8001a58:	2b70      	cmp	r3, #112	; 0x70
 8001a5a:	d01a      	beq.n	8001a92 <HAL_TIM_ConfigClockSource+0xa6>
 8001a5c:	2b70      	cmp	r3, #112	; 0x70
 8001a5e:	d87b      	bhi.n	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
 8001a60:	2b60      	cmp	r3, #96	; 0x60
 8001a62:	d050      	beq.n	8001b06 <HAL_TIM_ConfigClockSource+0x11a>
 8001a64:	2b60      	cmp	r3, #96	; 0x60
 8001a66:	d877      	bhi.n	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
 8001a68:	2b50      	cmp	r3, #80	; 0x50
 8001a6a:	d03c      	beq.n	8001ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8001a6c:	2b50      	cmp	r3, #80	; 0x50
 8001a6e:	d873      	bhi.n	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
 8001a70:	2b40      	cmp	r3, #64	; 0x40
 8001a72:	d058      	beq.n	8001b26 <HAL_TIM_ConfigClockSource+0x13a>
 8001a74:	2b40      	cmp	r3, #64	; 0x40
 8001a76:	d86f      	bhi.n	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
 8001a78:	2b30      	cmp	r3, #48	; 0x30
 8001a7a:	d064      	beq.n	8001b46 <HAL_TIM_ConfigClockSource+0x15a>
 8001a7c:	2b30      	cmp	r3, #48	; 0x30
 8001a7e:	d86b      	bhi.n	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d060      	beq.n	8001b46 <HAL_TIM_ConfigClockSource+0x15a>
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d867      	bhi.n	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d05c      	beq.n	8001b46 <HAL_TIM_ConfigClockSource+0x15a>
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d05a      	beq.n	8001b46 <HAL_TIM_ConfigClockSource+0x15a>
 8001a90:	e062      	b.n	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001aa2:	f000 f968 	bl	8001d76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	609a      	str	r2, [r3, #8]
      break;
 8001abe:	e04f      	b.n	8001b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ad0:	f000 f951 	bl	8001d76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ae2:	609a      	str	r2, [r3, #8]
      break;
 8001ae4:	e03c      	b.n	8001b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001af2:	461a      	mov	r2, r3
 8001af4:	f000 f8c8 	bl	8001c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2150      	movs	r1, #80	; 0x50
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f91f 	bl	8001d42 <TIM_ITRx_SetConfig>
      break;
 8001b04:	e02c      	b.n	8001b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b12:	461a      	mov	r2, r3
 8001b14:	f000 f8e6 	bl	8001ce4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2160      	movs	r1, #96	; 0x60
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f90f 	bl	8001d42 <TIM_ITRx_SetConfig>
      break;
 8001b24:	e01c      	b.n	8001b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b32:	461a      	mov	r2, r3
 8001b34:	f000 f8a8 	bl	8001c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2140      	movs	r1, #64	; 0x40
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f8ff 	bl	8001d42 <TIM_ITRx_SetConfig>
      break;
 8001b44:	e00c      	b.n	8001b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f000 f8f6 	bl	8001d42 <TIM_ITRx_SetConfig>
      break;
 8001b56:	e003      	b.n	8001b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b5c:	e000      	b.n	8001b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
	...

08001bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <TIM_Base_SetConfig+0xb8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d00b      	beq.n	8001bf4 <TIM_Base_SetConfig+0x30>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be2:	d007      	beq.n	8001bf4 <TIM_Base_SetConfig+0x30>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a26      	ldr	r2, [pc, #152]	; (8001c80 <TIM_Base_SetConfig+0xbc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <TIM_Base_SetConfig+0x30>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <TIM_Base_SetConfig+0xc0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d108      	bne.n	8001c06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <TIM_Base_SetConfig+0xb8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00b      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c14:	d007      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <TIM_Base_SetConfig+0xbc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d003      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <TIM_Base_SetConfig+0xc0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d108      	bne.n	8001c38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <TIM_Base_SetConfig+0xb8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d103      	bne.n	8001c6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	615a      	str	r2, [r3, #20]
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40000800 	.word	0x40000800

08001c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	f023 0201 	bic.w	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f023 030a 	bic.w	r3, r3, #10
 8001cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	621a      	str	r2, [r3, #32]
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f023 0210 	bic.w	r2, r3, #16
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	031b      	lsls	r3, r3, #12
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	621a      	str	r2, [r3, #32]
}
 8001d38:	bf00      	nop
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f043 0307 	orr.w	r3, r3, #7
 8001d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	609a      	str	r2, [r3, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b087      	sub	sp, #28
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	021a      	lsls	r2, r3, #8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	609a      	str	r2, [r3, #8]
}
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e046      	b.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00e      	beq.n	8001e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e18:	d009      	beq.n	8001e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d004      	beq.n	8001e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d10c      	bne.n	8001e48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800

08001e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e042      	b.n	8001f2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe fbec 	bl	8000698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2224      	movs	r2, #36	; 0x24
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f91d 	bl	8002118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d16d      	bne.n	8002030 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_UART_Transmit+0x2c>
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e066      	b.n	8002032 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	; 0x21
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f72:	f7fe fc91 	bl	8000898 <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_UART_Transmit+0x6c>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d104      	bne.n	8001fa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	e003      	b.n	8001fa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fa8:	e02a      	b.n	8002000 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f840 	bl	800203a <UART_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e036      	b.n	8002032 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	3302      	adds	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	e007      	b.n	8001ff2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1cf      	bne.n	8001faa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2200      	movs	r2, #0
 8002012:	2140      	movs	r1, #64	; 0x40
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f810 	bl	800203a <UART_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e006      	b.n	8002032 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b090      	sub	sp, #64	; 0x40
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204a:	e050      	b.n	80020ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002052:	d04c      	beq.n	80020ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <UART_WaitOnFlagUntilTimeout+0x30>
 800205a:	f7fe fc1d 	bl	8000898 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002066:	429a      	cmp	r2, r3
 8002068:	d241      	bcs.n	80020ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	330c      	adds	r3, #12
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	e853 3f00 	ldrex	r3, [r3]
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	330c      	adds	r3, #12
 8002088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800208a:	637a      	str	r2, [r7, #52]	; 0x34
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002092:	e841 2300 	strex	r3, r2, [r1]
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1e5      	bne.n	800206a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3314      	adds	r3, #20
 80020a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	e853 3f00 	ldrex	r3, [r3]
 80020ac:	613b      	str	r3, [r7, #16]
   return(result);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3314      	adds	r3, #20
 80020bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020be:	623a      	str	r2, [r7, #32]
 80020c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c2:	69f9      	ldr	r1, [r7, #28]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	e841 2300 	strex	r3, r2, [r1]
 80020ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e5      	bne.n	800209e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e00f      	b.n	800210e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4013      	ands	r3, r2
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	429a      	cmp	r2, r3
 800210a:	d09f      	beq.n	800204c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3740      	adds	r7, #64	; 0x40
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002152:	f023 030c 	bic.w	r3, r3, #12
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	430b      	orrs	r3, r1
 800215e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <UART_SetConfig+0x114>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d103      	bne.n	8002188 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002180:	f7ff fa58 	bl	8001634 <HAL_RCC_GetPCLK2Freq>
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	e002      	b.n	800218e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002188:	f7ff fa40 	bl	800160c <HAL_RCC_GetPCLK1Freq>
 800218c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	009a      	lsls	r2, r3, #2
 8002198:	441a      	add	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <UART_SetConfig+0x118>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	0119      	lsls	r1, r3, #4
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009a      	lsls	r2, r3, #2
 80021b8:	441a      	add	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <UART_SetConfig+0x118>)
 80021c6:	fba3 0302 	umull	r0, r3, r3, r2
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2064      	movs	r0, #100	; 0x64
 80021ce:	fb00 f303 	mul.w	r3, r0, r3
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	3332      	adds	r3, #50	; 0x32
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <UART_SetConfig+0x118>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e4:	4419      	add	r1, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	009a      	lsls	r2, r3, #2
 80021f0:	441a      	add	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <UART_SetConfig+0x118>)
 80021fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2064      	movs	r0, #100	; 0x64
 8002206:	fb00 f303 	mul.w	r3, r0, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	3332      	adds	r3, #50	; 0x32
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <UART_SetConfig+0x118>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	440a      	add	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40013800 	.word	0x40013800
 8002230:	51eb851f 	.word	0x51eb851f

08002234 <memset>:
 8002234:	4603      	mov	r3, r0
 8002236:	4402      	add	r2, r0
 8002238:	4293      	cmp	r3, r2
 800223a:	d100      	bne.n	800223e <memset+0xa>
 800223c:	4770      	bx	lr
 800223e:	f803 1b01 	strb.w	r1, [r3], #1
 8002242:	e7f9      	b.n	8002238 <memset+0x4>

08002244 <__libc_init_array>:
 8002244:	b570      	push	{r4, r5, r6, lr}
 8002246:	2600      	movs	r6, #0
 8002248:	4d0c      	ldr	r5, [pc, #48]	; (800227c <__libc_init_array+0x38>)
 800224a:	4c0d      	ldr	r4, [pc, #52]	; (8002280 <__libc_init_array+0x3c>)
 800224c:	1b64      	subs	r4, r4, r5
 800224e:	10a4      	asrs	r4, r4, #2
 8002250:	42a6      	cmp	r6, r4
 8002252:	d109      	bne.n	8002268 <__libc_init_array+0x24>
 8002254:	f000 f81a 	bl	800228c <_init>
 8002258:	2600      	movs	r6, #0
 800225a:	4d0a      	ldr	r5, [pc, #40]	; (8002284 <__libc_init_array+0x40>)
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <__libc_init_array+0x44>)
 800225e:	1b64      	subs	r4, r4, r5
 8002260:	10a4      	asrs	r4, r4, #2
 8002262:	42a6      	cmp	r6, r4
 8002264:	d105      	bne.n	8002272 <__libc_init_array+0x2e>
 8002266:	bd70      	pop	{r4, r5, r6, pc}
 8002268:	f855 3b04 	ldr.w	r3, [r5], #4
 800226c:	4798      	blx	r3
 800226e:	3601      	adds	r6, #1
 8002270:	e7ee      	b.n	8002250 <__libc_init_array+0xc>
 8002272:	f855 3b04 	ldr.w	r3, [r5], #4
 8002276:	4798      	blx	r3
 8002278:	3601      	adds	r6, #1
 800227a:	e7f2      	b.n	8002262 <__libc_init_array+0x1e>
 800227c:	08002310 	.word	0x08002310
 8002280:	08002310 	.word	0x08002310
 8002284:	08002310 	.word	0x08002310
 8002288:	08002314 	.word	0x08002314

0800228c <_init>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr

08002298 <_fini>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	bf00      	nop
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr
